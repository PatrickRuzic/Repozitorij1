% PUBLISHER

import rclpy
from rclpy.node import Node
from std_msgs.msg import Int32
import time

class PublisherNode(Node):
    def __init__(self):
        super().__init__('publisher_node')
        self.publisher = self.create_publisher(Int32, 'broj', 10)
        timer_period = 1
        self.timer = self.create_timer(timer_period, self.publish_number)
        self.i = 0

    def publish_number(self):
        msg = Int32()
        msg.data = self.i
        self.publisher.publish(msg)
        self.i += 1

def main(args=None):
    rclpy.init(args=args)
    node = PublisherNode()
    rclpy.spin(node)
    rclpy.shutdown()

if __name__ == '__main__':
    main()
------------------------------------------------------------------------------

% SUBSCRIBER

import rclpy
from rclpy.node import Node
from std_msgs.msg import Int32

class SubscriberPublisherNode(Node):
    def __init__(self):
        super().__init__('subscriber_publisher_node')
        self.subscription = self.create_subscription(
            Int32, 'broj', self.callback, 1)
        self.publisher = self.create_publisher(Int32, 'kvadrat_broja', 1)

    def callback(self, msg):
        broj = msg.data
        kvadrat = broj ** 2
        kvadrat_broja = Int32()
        kvadrat_broja.data = kvadrat
        self.publisher.publish(kvadrat_broja)
        

def main(args=None):
    rclpy.init(args=args)
    node = SubscriberPublisherNode()
    rclpy.spin(node)
    rclpy.shutdown()

if __name__ == '__main__':
    main()
